@page "/blazor-forms"
<div class="col-12 offset-md-2 col-md-8 border">
	<div class="text-center pt-4">
		<h2 class="text-success">Product Form</h2>
		<hr />
	</div>

	<div class="mx-2 px-2">
		<EditForm FormName="ProductCreate" Model="Product" OnValidSubmit="HandleProductCreate">
			<DataAnnotationsValidator></DataAnnotationsValidator>
			<ValidationSummary></ValidationSummary>
			<div class="form-group py-2">
				Name:
				<InputText class="form-control" @bind-Value="@Product.Name"></InputText>
				<ValidationMessage For="@(()=> Product.Name)"></ValidationMessage>
			</div>
			<div class="form-group py-2">
				Price:
				<InputNumber class="form-control" @bind-Value="@Product.Price"></InputNumber>
				<ValidationMessage For="@(()=> Product.Price)"></ValidationMessage>
			</div>

			<div class="form-group py-2">
				Category:
				<InputSelect class="form-select" @bind-Value="Product.Category">
					@foreach(var cat in Enum.GetValues(typeof(Category)))
					{
						<option value="@cat">@cat</option>
					}
				</InputSelect>
			</div>

			<div class="form-group py-2">
				IsActive:
				<InputCheckbox @bind-Value="@Product.IsActive"></InputCheckbox>
			</div>

			<div class="form-group py-2">
				Avaliable After:
				<InputDate class="form-control" @bind-Value="@Product.AvaliableAfter"></InputDate>
			</div>


			<button class="btn btn-primary my-3" style="width:200px">Create Product</button>
			<p class="text-success">@(IsProcessing==true?"Processing...":"")</p>
		</EditForm>
	</div>

	@if(CreatedProduct != null)
	{
		<div class="mx-2 pt-4">
			<hr />
			<h2 class="text-success">Created Product</h2>
			<div class="px-4">
				Name: @CreatedProduct.Name <br />
				Price: @CreatedProduct.Price <br />
				Category: @CreatedProduct.Category <br />
				IsActive: @CreatedProduct.IsActive <br />
				Avaliable After: @CreatedProduct.AvaliableAfter <br />
			</div>
		</div>
	}

</div>



@code {
	[SupplyParameterFromForm]
	public Product Product { get; set; } = new Product();
	private Product? CreatedProduct { get; set; }
	private bool IsProcessing = false;


	private async Task HandleProductCreate()
	{
		IsProcessing = true;
		await Task.Delay(2000);
		CreatedProduct = Product;
		Product = new();
		IsProcessing = false;
	}




}
